/**
 * generated secret
 * temporary key, works till 2022-10-01 
 * @type {String}
 *
 * @properties={typeid:35,uuid:"1CB2E8A7-9199-45EE-8499-FA37C60E2907"}
 */
var clientSecret = 'ZWt8Q~VS~HN_dE.Qrrmq4ymf-X5c0AesQBNgIcSf';

/**
 * client-id, generated by Azure unpon registration
 * @type {String}
 *
 * @properties={typeid:35,uuid:"FCC332C7-04AD-4F61-99B0-3235A31802E3"}
 */
var clientId = '1c62cf99-7745-4589-8f89-55f084f4d2a4';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"78DC91AD-4FAE-4157-A287-4EBBAD6EDC71"}
 */
var state = 'SecretSauce22';

/**
 * @type {String}
 * @properties={typeid:35,uuid:"E2328962-8ADD-4E43-BCB5-9E8C7A0CEE9B"}
 */
var accessToken = null;

/**
 * @type {String}
 * @properties={typeid:35,uuid:"B9A70E1B-EF19-4067-8945-8E029BC2B7D3"}
 */
var refreshToken = null

/**
 * @type {Date}
 * @properties={typeid:35,uuid:"51EE3C27-E00E-4502-A4C3-80A2554DB120",variableType:93}
 */
var accessTokenExpiresOn = null;


/**
 * @type {Array<String>}
 *
 * @properties={typeid:35,uuid:"01B91E4D-2CA9-4770-B569-8FCAC9694614",variableType:-4}
 */
var scopeList = ['openid', 
	'offline_access', 
	'https://outlook.office365.com/Mail.Read', 
	'https://outlook.office365.com/Mail.Read.Shared', 
	'https://outlook.office365.com/Mail.ReadBasic', 
	'https://outlook.office365.com/Mail.ReadWrite', 
	'https://outlook.office365.com/Mail.ReadWrite.Shared', 
	'https://outlook.office365.com/Mail.Send', 
	'https://outlook.office365.com/Mail.Send.Shared', 
	'https://outlook.office365.com/SMTP.Send', 
	'https://outlook.office365.com/User.Read'];

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"C854E2A0-C0FF-4C00-B850-E7E736663A7C"}
 */
var redirectUrl = 'http://localhost:8183/solutions/office365_test/m/onO365Authorize';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"C9E93C3A-0D2B-4288-A63C-CEF40FABE420"}
 */
var user_email = 'Robert.Edelmann@BauProCheck.de';
	
/**
 * Callback function, receives informations after users accepts login via OAuth
 * has to be in scopes.globals of the main solution
 * information should be transferred to the correct scope via
 * scopes.office365.onO365Authorize(a,args);
 * @param a
 * @param args
 *
 * @properties={typeid:24,uuid:"10911D41-B495-4CAF-AE65-C565B0211A8D"}
 */
function onO365Authorize (a, args) {
	if (args && args.hasOwnProperty('code') && args['code']) {
//		application.output('found code: ' + args['code']);
		getAccessTokenFromAuthCode(args['code']);
	}
}

/**
 * the function that starts it all; 
 * @properties={typeid:24,uuid:"1F64392F-2D0D-40BD-BF84-E49473A8EB4E"}
 */
function authO365_getCode() {
	var oauthOffice365 = plugins.oauth.serviceBuilder(clientId);        //client/application ID
	oauthOffice365.clientSecret(clientSecret);        //client secret
    oauthOffice365.defaultScope(scopeList.join(' ')); //Access IMAP  / POP3
    oauthOffice365.state(state)                       //session state
    oauthOffice365.deeplink("onO365Authorize")        //OPTIONAL deeplink method name or last part of your redirect URL, see docs
                                        //if missing, a global method with the name 'deeplink_svy_oauth' will be generated
    oauthOffice365.callback(onO365Authorize, 30)           //see function below, timeout is 30 seconds
	oauthOffice365.responseMode('query');
    oauthOffice365.responseType('code');
    oauthOffice365.build(plugins.oauth.OAuthProviders.MICROSOFT_AD);
}

/**
 * @param {String} code code from authorization
 * @properties={typeid:24,uuid:"B577C101-8EDD-46CB-8FA3-D6F673E3D73A"}
 */
function getAccessTokenFromAuthCode(code) {
	if (!code) {
		return;
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest('https://login.microsoftonline.com/common/oauth2/v2.0/token');
	request.addHeader('Content-Type', 'application/x-www-form-urlencoded');
	var bodyContent = 'client_id='+clientId;
	bodyContent += '&scope='+scopeList.join(' ');
	bodyContent += '&redirect_uri='+redirectUrl;
	bodyContent += '&grant_type=authorization_code';
	bodyContent += '&client_secret='+clientSecret;
	bodyContent += '&code=' + code;
	request.setBodyContent(bodyContent);
	var start = new Date();
	var response = request.executeRequest();
	var statusCode = response.getStatusCode()
	if (statusCode != 200) {
		application.output('Error processing request, Statuscode ' + statusCode.toString() + '\n' + response.getResponseBody());
		return;
	} else {
		/** @type {{token_type: String, scope: String, expires_in: Number, ext_expires_in: Number, access_token: String, refresh_token: String, id_token: String}} */
		var accessTokenObject = JSON.parse(response.getResponseBody());
		refreshToken = accessTokenObject.refresh_token;
		accessToken = accessTokenObject.access_token;
		accessTokenExpiresOn = new Date(start.getTime()  + accessTokenObject.expires_in*1000);
//		application.output('access token from code expires on ' + accessTokenExpiresOn.toString());

//		immediately get a new set of tokens with longer duration
		refreshAccessToken();
	}
}

/**
 * @properties={typeid:24,uuid:"7E5F39AE-2774-4DCB-9331-7DC6F5CBA6A0"}
 */
function refreshAccessToken() {
	if (!refreshToken) {
		return;
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest('https://login.microsoftonline.com/common/oauth2/v2.0/token');
	request.addHeader('Content-Type', 'application/x-www-form-urlencoded');
	var bodyContent = 'client_id='+clientId;
	bodyContent += '&grant_type=refresh_token';
	bodyContent += '&scope='+scopeList.join(' ');
	bodyContent += '&refresh_token='+refreshToken;
	bodyContent += '&client_secret='+clientSecret;
	request.setBodyContent(bodyContent);

	var start = new Date();
	var response = request.executeRequest();
	var statusCode = response.getStatusCode()
	if (statusCode != 200) {
		application.output('Error processing request, Statuscode ' + statusCode.toString() + '\n' + response.getResponseBody());
		return;
	} else {
		/** @type {{token_type: String, scope: String, expires_in: Number, ext_expires_in: Number, access_token: String, refresh_token: String, id_token: String}} */
		var accessTokenObject = JSON.parse(response.getResponseBody());
		accessToken = accessTokenObject.access_token;
		refreshToken = accessTokenObject.refresh_token;
		accessTokenExpiresOn = new Date(start.getTime()  + accessTokenObject.expires_in*1000);
//		application.output('acces token expires on: ' + accessTokenExpiresOn.toString())
//		getImapFolders();
		getImapMails();
	}

}

/**
 * uses the access_token to authenticate
 * @properties={typeid:24,uuid:"66279104-70F9-4088-999A-AD0471CA2786"}
 */
function getImapFolders() {
	var imapAccount = plugins.MailPro.ImapAccount('emailaccount', 'outlook.office365.com', user_email, accessToken);
	imapAccount.port = 993
	var props = {
		"mail.imap.fetchsize": java.lang.Integer.parseInt('1048576'),
		"mail.imaps.fetchsize": java.lang.Integer.parseInt('1048576'),
		"mail.imap.connectionpoolsize": "10",
		"mail.imaps.connectionpoolsize": "10",
		'mail.imaps.starttls.enable': true,
		'mail.imap.starttls.enable': true,
		"mail.imap.ssl.enable": true,
		"mail.imaps.ssl.enable": true,
		"mail.imap.auth.mechanisms": "XOAUTH2",
		"mail.imap.auth.plain.disable": true,
		"mail.imaps.auth.mechanisms": "XOAUTH2",
		"mail.imaps.auth.plain.disable": true
	};

	var rootFolder = imapAccount.connect(props);
	if (!rootFolder || !imapAccount.connected) {
		if (imapAccount.getLastError()) {
			throw imapAccount.getLastError();
		} else {
			return;
		}
	}
	var folder = imapAccount.getRootFolder()
	var subFolders = folder.getSubfolders();
	for (var iFolders = 11; iFolders < subFolders.length; iFolders++) {
		try {
			application.output(subFolders[iFolders].fullName + ' -> ' + subFolders[iFolders].getMessageCount().toString());
		} catch (e) {
			application.output('Error Accessing Folder: ' + e.name + ' -> ' + e.message + '\n' + e.stack,LOGGINGLEVEL.ERROR)
			break;
		}
	}
}


/**
 * uses the access_token to authenticate
 * @properties={typeid:24,uuid:"5A1F2AC8-8A94-40F4-8099-2DED882EAFBE"}
 */
function getImapMails() {
	var imapAccount = plugins.MailPro.ImapAccount('emailaccount', 'outlook.office365.com', user_email, accessToken);
	imapAccount.port = 993
	var props = {
		"mail.imap.fetchsize": java.lang.Integer.parseInt('1048576'),
		"mail.imaps.fetchsize": java.lang.Integer.parseInt('1048576'),
		"mail.imap.connectionpoolsize": "10",
		"mail.imaps.connectionpoolsize": "10",
		'mail.imaps.starttls.enable': true,
		'mail.imap.starttls.enable': true,
		"mail.imap.ssl.enable": true,
		"mail.imaps.ssl.enable": true,
		"mail.imap.auth.mechanisms": "XOAUTH2",
		"mail.imap.auth.plain.disable": true,
		"mail.imaps.auth.mechanisms": "XOAUTH2",
		"mail.imaps.auth.plain.disable": true
	};

	var rootFolder = imapAccount.connect(props);
	if (!rootFolder || !imapAccount.connected) {
		if (imapAccount.getLastError()) {
			throw imapAccount.getLastError();
		} else {
			return;
		}
	}
	var folder = imapAccount.getFolder('INBOX');
	if (folder) {
		var messageCount = folder.getMessageCount()
		var messageUIDsFolder = folder.getMessageUids()
		application.output('there are ' + messageCount.toString() + ' messages in the folder:\n' + messageUIDsFolder.join(', '));
	}
}