/**
 * generated secret
 * temporary key, works till 2022-10-01
 * @type {String}
 *
 *
 * @properties={typeid:35,uuid:"D2A9F349-FCE4-40EE-8DEF-CAAE1D3238F8"}
 */
var clientSecret = '';

/**
 * client-id, generated by Azure unpon registration
 * @type {String}
 *
 *
 * @properties={typeid:35,uuid:"0E4A69F2-5249-453C-88B2-4C69EBEDE3C5"}
 */
var clientId = '';

/**
 * @type {String}
 *
 *
 * @properties={typeid:35,uuid:"8D4474D0-3C7C-4CFD-8829-B8A979B7629E"}
 */
var tenantId = '';
/**
 * @type {String}
 *
 *
 * @properties={typeid:35,uuid:"B4AA653E-979B-44D4-B938-3CABAF41D18D"}
 */
var state = 'SecretSauce22';

/**
 * @type {String}
 *
 *
 * @properties={typeid:35,uuid:"672CE336-A320-4890-AED6-3947F74DD37C"}
 */
var idToken = '';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"38496EB7-FBF8-4D12-BE5B-018D0B95B0DB"}
 */
var accessToken = null;

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"1E8459C6-895C-4F57-891D-3857E82AAEDA"}
 */
var refreshToken = null;

/**
 * @type {Date}
 *
 * @properties={typeid:35,uuid:"B9647A5C-4109-469B-A9ED-401E81726E52",variableType:93}
 */
var accessTokenExpiresOn = null;

/**
 * @type {plugins.oauth.OAuthService}
 *
 * @properties={typeid:35,uuid:"59BD1954-AB5D-48AF-BFC7-50793A4706DF",variableType:-4}
 */
var office365Service = null;

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"FA23DA16-3931-4041-876C-07C6582FDA5A"}
 */
var scope = 'openid\noffline_access\nhttps://graph.microsoft.com/.default';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"07580943-B218-48CA-A040-FD588D42C4A8"}
 */
var redirectUrl = 'http://localhost:8183/solutions/office365_test/m/onO365Authorize';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"25AFFA29-10C1-4204-A644-84B861ABCB7F"}
 */
var email_from = '';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"7D8636AA-5802-4876-AA6A-692EAD5426F1"}
 */
var email_to = '';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"CE00DAFF-45AA-4CC3-97D5-10AE6E076A0C"}
 */
var email_subject = 'subject';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"1D71BA3D-DF40-4593-93CE-CB5E3769EFE0"}
 */
var email_body = 'email_body';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"DAAAE5C5-2B89-4E96-B059-64ABFCDE508A"}
 */
var folderInfo = '';
	

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"D06EE1DC-8B53-423B-B0DE-945B81DAEDD2"}
 */
var mailInfo = '';

/**
 * maximum number of mails to fetch
 *  
 * @type {Number}
 *
 * @properties={typeid:35,uuid:"97DB9AC2-B7EA-4703-8A0D-EDC4AE95B9D5",variableType:4}
 */
var maxMails = 600;

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"BE2A7941-E6C3-4214-89E7-E2B0F67B7E80"}
 */
var mailId = 'AAMkADk2YmZhYzM3LTA3MDEtNDQzMy1hMDIxLTc2YTdhZTg1ZTJmMwBGAAAAAADq8kDDlqxFQIlew8QuAH2wBwDg2aA4sXKoS7Q4eRHY29AUAAAAAAEMAADg2aA4sXKoS7Q4eRHY29AUAAPUxEGiAAA=';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"84BF7BA3-83A2-4B69-93EF-E04A4AF18E0F"}
 */
var folderIDTemp = 'AAMkADk2YmZhYzM3LTA3MDEtNDQzMy1hMDIxLTc2YTdhZTg1ZTJmMwAuAAAAAADq8kDDlqxFQIlew8QuAH2wAQDg2aA4sXKoS7Q4eRHY29AUAAAAAAEJAAA=';

/**
 * @type {JSDataSet}
 * @properties={typeid:35,uuid:"340FA1FC-6A89-4A18-BBBC-B23DC975738A",variableType:-4}
 */
var dsImapOrdner = null;

/**
 * Using the OAuth-Service to get new refresh_token/access_token
 * @param result
 * @param auth_outcome
 *
 * @properties={typeid:24,uuid:"C2562FC9-FE8A-49A0-A983-1860D8559611"}
 */
function onO365Authorize(result, auth_outcome) {
	if (result) {
		//SUCCESS
		/** @type {plugins.oauth.OAuthService} */
		office365Service = auth_outcome;
		idToken = office365Service.getIdToken();
		accessToken = office365Service.getAccessToken()
		refreshToken = office365Service.getRefreshToken();
		accessTokenExpiresOn = new Date(new Date().getTime() + 1000 * office365Service.getAccessTokenLifetime());
		if (!accessToken) {
			application.output('could not get token from service.');
			return;
		}
	} else {
		//ERROR
		application.output("ERROR " + auth_outcome, LOGGINGLEVEL.ERROR);
	}
}

/**
 * the function that starts it all;
 * @properties={typeid:24,uuid:"F0FA5882-9310-41A1-9DAF-8DEC5C98D321"}
 */
function authO365_getCode() {
	var oauthOffice365 = plugins.oauth.serviceBuilder(clientId);
	oauthOffice365.clientSecret(clientSecret);
	oauthOffice365.defaultScope(scope.split('\n').join(' '));
	if (tenantId) {
		oauthOffice365.tenant(tenantId);
	}
	oauthOffice365.state(state)
	oauthOffice365.deeplink("onO365Authorize")
	oauthOffice365.callback(onO365Authorize, 30)
	oauthOffice365.responseMode('query');
	oauthOffice365.responseType('code');
	oauthOffice365.build(plugins.oauth.OAuthProviders.MICROSOFT_AD);
}

/**
 * When there's an existing (and valid) refresh_token you can get a
 * fresh set of access_token and refresh_token manually
 *
 * @properties={typeid:24,uuid:"FE798500-8CC0-4AE0-9C36-8871E2C3A8D6"}
 */
function refreshAccessToken() {
	if (!refreshToken) {
		return;
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest('https://login.microsoftonline.com/common/oauth2/v2.0/token');
	request.addHeader('Content-Type', 'application/x-www-form-urlencoded');
	var bodyContent = 'client_id=' + clientId;
	bodyContent += '&grant_type=refresh_token';
	bodyContent += '&scope=' + scope.split('\n').join(' ');
	bodyContent += '&refresh_token=' + refreshToken;
	bodyContent += '&client_secret=' + clientSecret;
	request.setBodyContent(bodyContent);

	var start = new Date();
	var response = request.executeRequest();
	var statusCode = response.getStatusCode()
	if (statusCode != 200) {
		application.output('Error processing request, Statuscode ' + statusCode.toString() + '\n' + response.getResponseBody());
		return;
	} else {
		/** @type {{token_type: String, scope: String, expires_in: Number, ext_expires_in: Number, access_token: String, refresh_token: String, id_token: String}} */
		var accessTokenObject = JSON.parse(response.getResponseBody());
		accessToken = accessTokenObject.access_token;
		refreshToken = accessTokenObject.refresh_token;
		accessTokenExpiresOn = new Date(start.getTime() + accessTokenObject.expires_in * 1000);
		idToken = accessTokenObject.id_token;
	}
}

/**
 * @properties={typeid:24,uuid:"45BDC602-0FDF-4E92-9E8D-C39E11163768"}
 */
function sendMailGraph() {
	if (!accessToken) {
		return;
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest('https://graph.microsoft.com/v1.0/me/sendMail');
	request.addHeader('Content-Type', 'application/json');
	request.addHeader('Authorization', accessToken)
	var sendObject = {
		message: {
			subject: email_subject,
			body: {
				contentType: 'Text',
				content: email_body
			},
			toRecipients: [{ emailAddress: { address: email_to } }],
			ccRecipients: [{ emailAddress: { address: 'robert.edelmann@gmail.com' } }]
		}, saveToSentItems: true
	}
	var bodyContent = JSON.stringify(sendObject)
	request.setBodyContent(bodyContent);
	var response = request.executeRequest();
	var statusCode = response.getStatusCode();
	application.output('Status: ' + statusCode + '\n'+response.getResponseBody());
}

/**
 * @param {JSEvent} jsEvent
 * @param {String} [folderId]
 * @properties={typeid:24,uuid:"54CAEE1A-ACEA-4383-9CCE-C27776DF8F8D"}
 */
function listMail(jsEvent, folderId) {
	mailInfo = ''
	if (!accessToken) {
		return;
	}
	var url = 'https://graph.microsoft.com/v1.0/me/messages?$select=sender,subject';
	var mailsfetched = 0
	do {
		var response = getGraphData(url);
		if (response) {
			
			var responseObject = JSON.parse(response);

			/** Array<{sender: Object, subject: String}> */
			var mailList = responseObject.value
			for (var indMails = 0; indMails < mailList.length; indMails++) {
				var mailObject = mailList[indMails] 
				var senderInfo = '';
				if (mailObject.hasOwnProperty('sender') && mailObject['sender'].hasOwnProperty('emailAddress'));
				/** @type {{name: String, address: String}} */
				var emailAddress = mailList[indMails].sender.emailAddress;
				senderInfo = (emailAddress.name ? emailAddress.name : '') + (emailAddress.address ? ' <' + emailAddress.address +'> - ' : '')
				mailInfo += senderInfo + '-> ' + mailList[indMails].subject + ' ' + mailList[indMails].id + '\n';
				mailsfetched++
			}
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink'] && mailsfetched < maxMails) {
//				application.output('list goes on: ' + responseObject['@odata.nextLink']);
				url = responseObject['@odata.nextLink'];
			} else {
				break;
			}
		} else {
			break;
		}
	} while (true);
}

/**
 * @param {JSEvent} jsEvent
 * @properties={typeid:24,uuid:"39239903-7FAC-436E-8FB3-47D8B8892291"}
 */
function listFoldersGraph(jsEvent) {
	folderInfo = '';
	if (!accessToken) {
		return;
	}
	var url = 'https://graph.microsoft.com/v1.0/me/mailFolders/';
	do {
		var response = getGraphData(url);
		if (response) {
			/**  @type {{value: Array<E>,@odata.nextLink: String}} */
			var responseObject = JSON.parse(response);
			/**  @type Array<{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}> */
			var folderList = responseObject['value'];
			for (var indFolder = 0; indFolder < folderList.length; indFolder++) {
				/** @type {{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}} */
				var folderObject = folderList[indFolder]
				folderInfo += folderObject.displayName + ' -> ' + folderObject.id + ' (' + folderObject.totalItemCount.toString() + ' entries, ' + folderObject.childFolderCount.toString() + ' subfolders)\n'
			}
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink']) {
//				application.output('list goes on: ' + responseObject['@odata.nextLink']);
				url = responseObject['@odata.nextLink'];
			} else {
				break;
			}
		} else {
			break;
		}
	} while (true);
}

/**
 * @param {String} url
 * @return {String}
 * @properties={typeid:24,uuid:"69C9FDC8-7879-43B5-B467-73D5CB5BBD4C"}
 */
function getGraphData(url) {
	if (!url || !url.toLowerCase().startsWith('https://')) {
		return null;
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createGetRequest(url);
	request.addHeader('Content-Type', 'application/json');
	request.addHeader('Authorization', accessToken)
	var response = request.executeRequest();
	var statusCode = response.getStatusCode();
	if (statusCode >= 200 && statusCode <= 299) {
//		application.output('\n************************\n'+response.getResponseBody()+'\n************************\n')
		return response.getResponseBody()
	} else {
//		application.output('error fetching data. Statuscode: ' + response.getStatusCode() + '\n' + response.getResponseBody(),LOGGINGLEVEL.ERROR);
	}
	return null;
}

/**
 * @properties={typeid:24,uuid:"5C3D180A-0EA4-4F17-B5BF-0EAAAE36B72A"}
 */
function getFolderTree() {
	dsImapOrdner = databaseManager.createEmptyDataSet(0, ['folder_name', 'parent_folder_id', 'folder_id', 'flag', 'has_checkbox']);
	if (!accessToken) {
		return;
	}
	var url = 'https://graph.microsoft.com/v1.0/me/mailFolders/';
	do {
		var response = getGraphData(url);
		if (response) {
			/** @type {{value: Array<E>,@odata.nextLink: String}} */
			var responseObject = JSON.parse(response);
			/** @type Array<{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}> */
			var folderList = responseObject['value'];
			for (var indFolder = 0; indFolder < folderList.length; indFolder++) {
				/** @type {{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}} */
				var folderObject = folderList[indFolder]
				folderInfo += folderObject.displayName + ' (' + folderObject.totalItemCount.toString() + ' entries, ' + folderObject.childFolderCount.toString() + ' subfolders)\n'
				dsImapOrdner.addRow([folderObject.displayName, null, folderObject.id, 0, 0]);
				if (folderObject.childFolderCount) {
					getSubFolders(folderObject.id, folderObject.displayName);
				}
			}
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink']) {
//				application.output('list goes on: ' + responseObject['@odata.nextLink']);
				url = responseObject['@odata.nextLink'];
			} else {
				break;
			}
		} else {
			break;
		}
	} while (true);
	if (dsImapOrdner.getMaxRowIndex()) {
		var ds = dsImapOrdner.createDataSource('folder_list', [JSColumn.TEXT, JSColumn.TEXT, JSColumn.TEXT, JSColumn.NUMBER, JSColumn.NUMBER]);
		var jsRelation = solutionModel.getRelation('folder_children');
		if (!jsRelation) {
			jsRelation = solutionModel.newRelation('folder_children', ds, ds, JSRelation.LEFT_OUTER_JOIN);
			jsRelation.newRelationItem('folder_id', '=', 'parent_folder_id');
		}

		history.removeForm('tree_imp');
		solutionModel.removeForm('tree_imp');
		
		var jsForm = solutionModel.cloneForm('tree_imp', solutionModel.getForm('folder_tree'));
		jsForm.dataSource = ds;
		
		var window = application.createWindow('folder_tree', JSWindow.MODAL_DIALOG);
		window.resizable = true
		window.title = 'Office 365 - folders'
		window.show(jsForm.name);
	}
}

/**
 * @param {String} parentFolderId
 * @param {String} parentFolderPath
 *
 * @properties={typeid:24,uuid:"DBAE35D5-4B3B-44CC-B215-B1B48067EEE7"}
 */
function getSubFolders(parentFolderId, parentFolderPath) {
	var url = 'https://graph.microsoft.com/v1.0/me/mailFolders/'+parentFolderId+'/childfolders/';
	do {
		var response = getGraphData(url);
		if (response) {
			/**  @type {{value: Array<{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}>, @odata.nextLink: String}} */
			var responseObject = JSON.parse(response);
			/** @type Array<{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}> */
			var folderList = responseObject['value'];
			for (var indFolder = 0; indFolder < folderList.length; indFolder++) {
				/** @type {{id: String, displayName: String, parentFolderId: String, childFolderCount: Number, unreadItemCount: Number, totalItemCount: Number, sizeInBytes: Number, isHidden: Boolean}} */
				var folderObject = folderList[indFolder]
				folderInfo += folderObject.displayName + ' (' + folderObject.totalItemCount.toString() + ' entries, ' + folderObject.childFolderCount.toString() + ' subfolders)\n'
				application.output(parentFolderPath + ' - ' + folderObject.displayName);
				dsImapOrdner.addRow([folderObject.displayName, folderObject.parentFolderId, folderObject.id, 0, 0]);
				if (folderObject.childFolderCount) {
					getSubFolders(folderObject.id,parentFolderPath + ' - ' + folderObject.displayName);
				}
			}
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink']) {
//				application.output('list goes on: ' + responseObject['@odata.nextLink']);
				url = responseObject['@odata.nextLink'];
			} else {
				break;
			}
		} else {
			break;
		}
	} while (true);
}

/**
 * @param {String} [id]
 * @return {String}
 * @properties={typeid:24,uuid:"5FFE3D4A-9DC0-4CA8-89FA-93DEB4E3E8A0"}
 */
function getEMLForID(id) {
	if (!id) {
		id = mailId
	}
	var url = 'https://graph.microsoft.com/v1.0/me/messages/' + id + '/$value';	

	var response = getGraphData(url);
	if (response) {
		return response
	} else {
		application.output('could not fetch message.')
	}
	return null;
}


/**
 * @param {String} [id]
 * @properties={typeid:24,uuid:"4B6BC09F-C9A0-4C74-8ED5-4AB977F32676"}
 */
function getAttachmentsForID(id) {
	if (!id) {
		id = mailId
	}
	var url = 'https://graph.microsoft.com/v1.0/me/messages/' + id + '/attachments?$select=Name'
	do {
		var response = getGraphData(url);
		if (response) {
			application.output(response);
			var responseObject = JSON.parse(response);
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink'] && mailsfetched < maxMails) {
				url = responseObject['@odata.nextLink'];
			} else {
				break;
			}
		} else {
			break;
		}
	} while (true); 	
}

/**
 * @param {String} [id]
 * @properties={typeid:24,uuid:"92012B75-96FE-4345-A9B6-8C9A17A7A607"}
 */
function getReceipientsFromID(id) {
	if (!id) {
		id = mailId
	}
	mailInfo = ''
	var url = 'https://graph.microsoft.com/v1.0/me/MailFolders/Inbox/messages/' + id
	var response = getGraphData(url);
	if (response) {
//		application.output(response)
		var mailObject = JSON.parse(response);
		var senderInfo = '';
		var toAddresses = [];
		var ccAddresses = [];
		var bccAddresses = [];
		if (mailObject.hasOwnProperty('sender') && mailObject['sender'].hasOwnProperty('emailAddress')) {
			/** @type {{name: String, address: String}} */
			var emailAddress = mailObject.sender.emailAddress;
			senderInfo = (emailAddress.name ? emailAddress.name : '') + (emailAddress.address ? ' <' + emailAddress.address +'> - ' : '')
		}
		if (mailObject.hasOwnProperty('toRecipients')) {
			/** @type {Array} */
			var toList = mailObject['toRecipients']
			for (var indTo = 0; indTo < toList.length; indTo++) {
				if (toList[indTo].hasOwnProperty('emailAddress') && toList[indTo]['emailAddress'].hasOwnProperty('address')) {
					toAddresses.push(toList[indTo].emailAddress.address);
				}
			}
		}
		if (mailObject.hasOwnProperty('ccRecipients')) {
			/** @type {Array} */
			var ccList = mailObject['ccRecipients']
			for (var indCC = 0; indCC < ccList.length; indCC++) {
				if (ccList[indCC].hasOwnProperty('emailAddress') && ccList[indCC]['emailAddress'].hasOwnProperty('address')) {
					ccAddresses.push(ccList[indCC].emailAddress.address);
				}
			}
		}
		if (mailObject.hasOwnProperty('bccRecipients')) {
			/** @type {Array} */
			var bccList = mailObject['bccRecipients']
			for (var indBCC = 0; indBCC < bccList.length; indBCC++) {
				if (bccList[indBCC].hasOwnProperty('emailAddress') && bccList[indBCC]['emailAddress'].hasOwnProperty('address')) {
					bccAddresses.push(ccList[indBCC].emailAddress.address);
				}
			}
		}
		
		mailInfo += senderInfo + '-> ' + mailObject.subject + ' ' + mailObject.id + '\nTo:' + toAddresses.join(' <-> ' )+ '\nCC:' + ccAddresses.join(' <-> ');
		application.output(mailInfo)
	}
}

/**
 * TODO generated, please specify type and doc for the params
 * @param folderID
 * @param lastURI
 *
 * @properties={typeid:24,uuid:"76BF5B22-C750-4C8E-AA09-D9CD9BF4FC66"}
 */
function getDeltaMessages() {
	folderIDTemp = folderIDTemp.trim();
	mailInfo = ''
	if (!accessToken) {
		return;
	}
	var url = 'https://graph.microsoft.com/v1.0/me/mailfolders/' + folderIDTemp + '/messages/delta?$select=sender,subject';
	var mailsfetched = 0
	do {
		var response = getGraphData(url);
		if (response) {
			
			var responseObject = JSON.parse(response);

			/** Array<{sender: Object, subject: String}> */
			var mailList = responseObject.value;
			for (var indMails = 0; indMails < mailList.length; indMails++) {
				var mailObject = mailList[indMails] 
				var senderInfo = '';
				if (mailObject.hasOwnProperty('sender') && mailObject['sender'].hasOwnProperty('emailAddress'));
				/** @type {{name: String, address: String}} */
				var emailAddress = mailList[indMails].sender.emailAddress;
				senderInfo = (emailAddress.name ? emailAddress.name : '') + (emailAddress.address ? ' <' + emailAddress.address +'> - ' : '')
				mailInfo += senderInfo + '-> ' + mailList[indMails].subject + ' ' + mailList[indMails].id + '\n';
				mailsfetched++
			}
			if (responseObject.hasOwnProperty('@odata.nextLink') && responseObject['@odata.nextLink'] && mailList.length > 0) {
				url = responseObject['@odata.nextLink'];
			} else {
				application.output('fetched all messages. Next time fetch new messages with: ' + responseObject['@odata.deltaLink']);
				break;
			}
		} else {
			break;
		}
	} while (true);
}

/**
 * get internet-headers
 * @param id
 * @return {String}
 * @properties={typeid:24,uuid:"30D0B56C-1A06-4EA3-ACF5-713AA53976F6"}
 */
function getHeadersForID(id) {
	if (!id) {
		id = mailId
	}
	var url = 'https://graph.microsoft.com/v1.0/me/messages/' + id + '?$select=InternetMessageHeaders';	

	var response = getGraphData(url);
	if (response) {
		var responseObject = JSON.parse(response);
		var headers = {}
		/** Array<{name: String, value:String}> */
		var headerList = responseObject['internetMessageHeaders'];
		for (var indHeader = 0; indHeader < headerList.length; indHeader++) {
			var headerName = headerList[indHeader].name;
			var headerValue = headerList[indHeader].value;
			application.output(headerName + ': ' + headerValue);
			headers[headerName] = headerValue;
		}
		return JSON.stringify(headers);
	} else {
		application.output('could not fetch message.')
	}
	return null;
}


/**
 * Erstellt einen Draft zum späteren Versand.
 * Worflow ist: Draft erstellen - Attachments anhängen - Draft versenden.
 * Mailversand erlaubt keine großen Dateien.
 *
 * @param {JSRecord<db:/bauprocheck_emails/email>} recordEmail
 * @param {JSRecord<db:/bauprocheck_emails/email_account>} recordEmailAccount
 * @return {Object}
 *
 * @properties={typeid:24,uuid:"F517E74A-F30B-462B-8FE9-0EF33930D532"}
 */
function createDraftObject(recordEmail, recordEmailAccount) {
	if (!recordEmail || !utils.hasRecords(recordEmail.email_to_email_account)) {
		throw new Error('Kein Emailaccount ausgewählt!');
	}

	if (!(recordEmail.nachricht_html || recordEmail.nachricht_text)) {
		//TODO: sonst kriegen wir no mime content; evtl. reichen aber attachments?
		throw new Error('Bitte geben Sie erst einen Text ein!');
	}

	var newDraft = {
		"from:": {
			"emailAddress": {
				"name": (scopes.BauProCheckDefaults.benutzer.anzeige_benutzer ? scopes.BauProCheckDefaults.benutzer.anzeige_benutzer : recordEmailAccount.email_adresse),
				"address": recordEmailAccount.email_adresse
			}
		},

		"sender": {
			"emailAddress": {
				"name": (scopes.BauProCheckDefaults.benutzer.anzeige_benutzer ? scopes.BauProCheckDefaults.benutzer.anzeige_benutzer : recordEmailAccount.email_adresse),
				"address": recordEmailAccount.email_adresse
			}
		},
		"subject": recordEmail.titel,
		"body": {
			"contentType": "HTML",
			"content": recordEmail.nachricht_html
		}
	}


	var toRecipients = [];
	var ccRecipients = [];
	var bccRecipients = [];

	var toFound = false;
	if (utils.hasRecords(recordEmail.email_to_email_empfaenger)) {
		for (var e = 1; e <= recordEmail.email_to_email_empfaenger.getSize(); e++) {
			var recordEmpfaenger = recordEmail.email_to_email_empfaenger.getRecord(e);
			if (recordEmpfaenger.email_adresse) {
				// Bereinigen der Email-Adresse wenn "name@domain <Name>" angegeben ist
				if (recordEmpfaenger.email_adresse.trim().indexOf(' ') > -1) {
					var arrayEmail = recordEmpfaenger.email_adresse.split(' ');
					recordEmpfaenger.email_adresse = arrayEmail.shift();
				}

				if (recordEmpfaenger.empfaenger_name) {
					var eaName = recordEmpfaenger.empfaenger_name
				}
				if (recordEmpfaenger.email_adresse) {
					var eaAddress = recordEmpfaenger.email_adresse;

					if (recordEmpfaenger.empfaenger_typ == scopes.Email.EMPFAENGER_TYP.TO) {
						toRecipients.push({"emailAddress": {"address": eaAddress, "name": eaName}});
						toFound = true;
					} else if (recordEmpfaenger.empfaenger_typ == scopes.Email.EMPFAENGER_TYP.CC) {
						ccRecipients.push({"emailAddress": {"address": eaAddress, "name": eaName}});
					} else if (recordEmpfaenger.empfaenger_typ == scopes.Email.EMPFAENGER_TYP.BCC) {
						bccRecipients.push({"emailAddress": {"address": eaAddress, "name": eaName}});
					}
				}
			}
		}
	}
	if (!toFound) {
		throw new Error('Bitte geben Sie mindestens einen Empfänger vom Typ \'AN\' an!');
	}
	newDraft.toRecipients = toRecipients;
	if(ccRecipients.length) {
		newDraft.ccRecipients = ccRecipients;
	}
	if(bccRecipients.length) {
		newDraft.bccRecipients = bccRecipients;
	}

	return newDraft;
}

/**
 * @param {String} draftId
 * @param {String} mailBody
 * @param {JSRecord<db:/bauprocheck_emails/email_account>} recordEmailAccount
 * @return {String}
 *
 * @properties={typeid:24,uuid:"698EE2B6-0486-4EDB-A897-68BF7BAB6862"}
 */
function convertBase64ToCid(draftId, mailBody, recordEmailAccount) {
	var jsoup = Packages.org.jsoup.Jsoup;
	var images = Packages.org.jsoup.select.Elements;
	var image = Packages.org.jsoup.nodes.Element;
	var htmlDoc = Packages.org.jsoup.nodes.Document;
	var iter = java.util.Iterator;

	htmlDoc = jsoup.parse(mailBody);
	images = htmlDoc.select('img')
	iter = images.iterator();
	while (iter.hasNext()) {
		image = iter.next();
		if (image.attr('src').toString().substr(0,5) != 'data:') {
			continue;
		}
		/** @type {String} */
		var imgData = image.attr('src').toString().substr(image.attr('src').toString().indexOf('base64,')+7)
		imgData = imgData.substr(0,imgData.length-2);
		var jsImage = plugins.images.getImage(utils.base64ToBytes(imgData));
		if (jsImage.getWidth() > 800 || jsImage.getHeight() > 800) {
			jsImage = jsImage.resize(800,800)
		}
		/** @type {String}  */
		var newExtension = scopes.MimeTypes.getExtension(jsImage.getContentType())
		if (!newExtension) {
			newExtension = '';
		} else if (newExtension.indexOf(', ') > -1) {
			newExtension = newExtension.split(', ').pop().trim()
		}
		var newName = application.getUUID().toString()+newExtension;
		uploadInlinePictureToDraft(draftId, jsImage.getData(), newName, recordEmailAccount)
		image.attr('src',newName);
	}
	return htmlDoc.toString();
}

/**
 * Maximum Size of File-Chunks, 4 MB is good according to https://learn.microsoft.com/en-us/graph/outlook-large-attachments?tabs=http#step-2-use-the-upload-session-to-upload-a-range-of-bytes-of-the-file
 * @type {Number}
 *
 * @properties={typeid:35,uuid:"86AE18BD-F118-4DFF-BDF5-CCD6E0542CF3",variableType:8}
 */
var maxFileChunkSize = 4*1024*1024

/**
 * @param {String} draftId
 * @param {JSRecord<db:/bauprocheck_emails/email_attachments>} recordAttachment
 * @param {JSRecord<db:/bauprocheck_emails/email_account>} recordEmailAccount
 * @return {Boolean}
 * @properties={typeid:24,uuid:"3C1B33CC-3732-4DFC-8569-C3E2B102651A"}
 */
function uploadFileToDraft(draftId, recordAttachment, recordEmailAccount) {
	if (!recordAttachment || !draftId) {
		return false;
	}
	var bytes = recordAttachment.foundset.getBytes(recordAttachment)
	var aktSize = 0;
	var chunk = 0;
	var success = true;
	var size = recordAttachment.groesse;
	var userId = 'me';
	if (recordEmailAccount.user_id) {
		userId = 'users/'+recordEmailAccount.user_id;
	}
	accessToken = scopes.oauth.getAccessTokenForEmail(recordEmailAccount);
	var url = 'https://graph.microsoft.com/v1.0/' + userId + '/messages/' + draftId + '/attachments/createUploadSession';
	var fileMetadata = {
		"AttachmentItem": {
			"attachmentType": "file",
			"name": recordAttachment.attachment_name,
			"size": size
		}
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest(url);
	request.addHeader('Authorization', accessToken);
	request.addHeader('Content-Type', 'application/json');
	request.setBodyContent(JSON.stringify(fileMetadata), 'application/json');
	var response = request.executeRequest();
	httpClient.close();
	var statusCode = response.getStatusCode();
	if (statusCode >= 200 && statusCode <= 299) {
		var responseBody = response.getResponseBody()
		if (responseBody) {
			var uploadURL = JSON.parse(responseBody)['uploadUrl'];
			if (uploadURL) {
				if (recordAttachment.attachment_name) {
					filename = recordAttachment.attachment_name;
				}
				var fileextension = filename.split('.').pop();
				while (aktSize < size) {
					chunk = chunk++
					var start = aktSize;
					/** @type {Array<byte>}  */
					var data = bytes.slice(start,start + maxFileChunkSize);
					var filename = 'temp_mail_' + utils.dateFormat(new Date,'yyyyMMdd-HHmmss') + chunk.toString() + '.tmp';
					var tempFile = plugins.file.createTempFile('temp',fileextension);
					tempFile.setBytes(data)
					var contentRange = 'bytes ' + start.toString() + '-' + (start + data.length - 1).toString() + '/' + size.toString();
					httpClient = plugins.http.createNewHttpClient();
					var uploadRequest = httpClient.createPutRequest(uploadURL);
					uploadRequest.setFile(tempFile);
					uploadRequest.addHeader('Content-Range', contentRange);
					uploadRequest.addHeader('Content-Length',data.length)
					response = uploadRequest.executeRequest();
					httpClient.close();
					tempFile.deleteFile();
					statusCode = response.getStatusCode();
					if (statusCode >= 200 && statusCode <= 299) {
						aktSize = aktSize + data.length;
					} else {
						logger.error('error uploading file.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode() + '\n' + response.getResponseBody());
						success = false;
						break;
					}
				}
			}
			if (success) {
				return true;
			}
		} else {
			logger.error('No info after uploading metadata.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode());
		}
	} else {
		logger.error('error while uploading metadata.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode() + '\n' + response.getResponseBody());
	}
	return false
}


/**
 *
 * @param {String} draftId
 * @param {Array<byte>} attachmentBytes
 * @param {String} filename
 * @param {JSRecord<db:/bauprocheck_emails/email_account>} recordEmailAccount
 * @return {Boolean}
 * @properties={typeid:24,uuid:"D21FF050-F8C3-48B4-A768-F74DB9BDE34B"}
 */
function uploadInlinePictureToDraft(draftId, attachmentBytes, filename, recordEmailAccount) {
	if (!attachmentBytes || !filename || !draftId) {
		return false;
	}
	var fileextension = filename.split('.').pop();
	var tempFile = plugins.file.createTempFile('temp',fileextension);

	tempFile.setBytes(attachmentBytes)
	var size = attachmentBytes.length;
	var userId = 'me';
	if (recordEmailAccount.user_id) {
		userId = 'users/'+recordEmailAccount.user_id;
	}
	accessToken = scopes.oauth.getAccessTokenForEmail(recordEmailAccount);
	var url = 'https://graph.microsoft.com/v1.0/' + userId + '/messages/' + draftId + '/attachments/createUploadSession';
	var fileMetadata = {
		"AttachmentItem": {
			"attachmentType": "file",
			"name": filename,
			"size": size,
		    "isInline": true,
		    "contentId": filename
		}
	}
	var httpClient = plugins.http.createNewHttpClient();
	var request = httpClient.createPostRequest(url);
	request.addHeader('Authorization', accessToken);
	request.addHeader('Content-Type', 'application/json');
	request.setBodyContent(JSON.stringify(fileMetadata), 'application/json');
	var response = request.executeRequest();
	httpClient.close();
	var statusCode = response.getStatusCode();
	if (statusCode >= 200 && statusCode <= 299) {
		var responseBody = response.getResponseBody()
		if (responseBody) {
			var uploadURL = JSON.parse(responseBody)['uploadUrl'];
			if (uploadURL) {
				httpClient = plugins.http.createNewHttpClient();
				var uploadRequest = httpClient.createPutRequest(uploadURL);
				uploadRequest.setFile(tempFile);
				uploadRequest.addHeader('Content-Range', 'bytes 0-' + (size - 1).toString() + '/' + size.toString());
				uploadRequest.addHeader('Content-Length',size)
				response = uploadRequest.executeRequest();
				httpClient.close();
				tempFile.deleteFile();
				statusCode = response.getStatusCode();
				if (statusCode >= 200 && statusCode <= 299) {
					responseBody = response.getResponseBody()
					return true;
				} else {
					logger.error('error uploading file.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode() + '\n' + response.getResponseBody());
				}
			}
		} else {
			logger.error('No info after uploading metadata.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode());
		}
	} else {
		logger.error('error while uploading metadata.\n' + 'URL: ' + url + '\nStatuscode: ' + response.getStatusCode() + '\n' + response.getResponseBody());
	}
	tempFile.deleteFile();
	return false
}